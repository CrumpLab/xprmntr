% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/html_stimulus.R
\name{html_stimulus}
\alias{html_stimulus}
\title{Write html stimulus description from dataframe}
\usage{
html_stimulus(df, html_content, html_element, column_names, css = NULL,
  id = "my_stim")
}
\arguments{
\item{df}{data.frame containing stimulus information and css codes in columns}

\item{html_content}{character column name containing html content to be placed between html element tags}

\item{html_element}{character the html element tag to use}

\item{column_names}{vector of column names containing css attribute definitions}

\item{css}{vector of names containing valid css attribute names}

\item{id}{character to set the id of the html element, defaults to "my_stim"}
}
\value{
vector of html code defining each stimulus
}
\description{
Write html stimulus description from dataframe
}
\examples{

# define a data frame with stimulus info
stroop_stim <- data.frame(stimulus = length(16),
  word = rep(c("red","green","blue","yellow"), each=4),
  color = rep(c("red","green","blue","yellow"), 4),
  response = rep(c("r","g","b","y"), 4),
  id = "stroop_stim",
  fontsize = "16pt")

  head(stroop_stim)

# create html stimulus definition
html_stimulus(df = stroop_stim,
 html_content = "word",
 html_element = "p",
 column_names = c("color","fontsize"),
 css = c("color", "font-size"),
 id = "id"
 )

 # use in a pipe to add stimulus definition to stimuli column
 library(dplyr)
 stroop_stim <- data.frame(stimulus = length(16),
    word = rep(c("red","green","blue","yellow"), each=4),
    color = rep(c("red","green","blue","yellow"), 4),
    response = rep(c("r","g","b","y"), 4),
    id = "stroop_stim",
    fontsize = "16pt") \%>\%
  mutate(stimulus = html_stimulus(df = .,
                     html_content = "word",
                     html_element = "p",
                     column_names = c("color","fontsize"),
                     css = c("color", "font-size"),
                     id = "id"))
  head(stroop_stim)


}
